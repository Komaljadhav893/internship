# 1 liner search
l=[1,2,3,4,5,6,7]
se=int(input())
for i in range(len(l)):
    if l[i]==se:
        print(i)
        break
else:
    print(-1)

------------------------------------------------------------------------------------

2 Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        si=0
        li=len(nums)-1
        while si<=li:
            mid=(si+li)//2
            if nums[mid]==target:
                return mid
            elif target > nums[mid]:
                si=mid+1
            else:
                li=mid-1      
        return si        
------------------------------------------------------------------------------------------------
3 here is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 class Solution:
    def search(self, nums: List[int], target: int) -> int:
        si=0
        li=len(nums)-1
        while si<=li:
            mid=(si+li)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]>=nums[si]:
                if (nums[si]<=target<nums[mid]):
                    li=mid-1
                else:
                    si=mid+1
            else:
                if (nums[mid]<target<=nums[li]):
                   si=mid+1
                else:
                    li=mid-1
        return -1       
           ------------------------------------------------------------------------------------------------------- 

4 Peak Index in a Mountain Array-852

class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        # for i in range(len(arr)):
        #     if(arr[i-1]<arr[i]>arr[i+1]):
        #         return i

     si=0
     li=len(arr)-1
     while si<=li:
        mid=(si+li)//2
        if(arr[mid-1]<arr[mid]>arr[mid+1]):
            return mid
        elif( arr[mid+1]>arr[mid]):
            si=mid+1
        else:
            li=mid   

-------------------------------------------------------------------------------------------
5 81. Search in Rotated Sorted Array II 
There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        si=0
        li=len(nums)-1
        while si<=li:
            mid=(si+li)//2
            if nums[mid]==target:
                # return mid
                return True
            
            elif nums[mid]>nums[si]:
                if (nums[si]<=target<nums[mid]):
                    li=mid-1
                else:
                    si=mid+1
            elif nums[mid]<nums[si]:
                if (nums[mid]<target<=nums[li]):
                    si=mid+1
                else:
                    li=mid-1
            else:
                si+=1
        return False
------------------------------------------------------------------------------------------------------------------------------------

