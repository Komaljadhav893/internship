# 1. bubble sort
l=list(map(int,input().split(',')))
for i in range(len(l)):
    a=0
    for j in range(len(l)-i-1):
        if l[j+1]<l[j]:
            l[j],l[j+1]=l[j+1],l[j]
            a=1
    if a==0:
        break
        
print(l)        

#2 in descending ordder
l=list(map(int,input().split(',')))
for i in range(len(l)):
    a=0
    for j in range(len(l)-i-1):
        if l[j+1]>l[j]:
            l[j],l[j+1]=l[j+1],l[j]
            a=1
    if a==0:
        break
        
print(l)  

#3 insertion sort
l=list(map(int,input().split(',')))
# temp=l[i]
for i in range(1,len(l)):
    temp=l[i]
    j=i-1
    while j>=0:
        if l[j]>temp:
            l[j+1]=l[j]
        else:
            break
        j-=1
    l[j+1]=temp    
print(l)   
------------------------------------------------------------------------
# #2 insertion sort
# l=[[2,4],[6,7],[9,8]]
# n=int(input())
# l=[]
# for i in range(n):
#     l.append(list(map(int,input().split(','))))
# for i in range(1,len(l)):
#     temp=l[i]
#     j=i-1
#     while j>=0:
#         if sum(l[j])>sum(temp):
#             l[j+1]=l[j]
#         else:
#             break
#         j-=1
#     l[j+1]=temp    
# print(l)   

-------------------------------------------------------------------------------------------------
# l=list(map(str,input().split(',')))
# for i in range(len(l)):
#     a=0
#     for j in range(len(l)-i-1):
#         if l[j+1]<l[j]:
#             l[j],l[j+1]=l[j+1],l[j]
#             a=1
#     if a==0:
#         break
# print(l)    
---------------------------------------------------------    
    
# selection sort
l=list(map(int,input().split(',')))
for i in range(len(l)):
    Min=l[i]
    mini=i
    for j in range(i,len(l)):
        if l[j]<Min:
            Min=l[j]
            mini=j
    l[i],l[mini]=l[mini],l[i] 
print(l)    





# l=list(map(str,input().split(',')))
# for i in range(len(l)):
#     a=0
#     for j in range(len(l)-i-1):
#         if l[j+1]<l[j]:
#             l[j],l[j+1]=l[j+1],l[j]
#             a=1
#     if a==0:
#         break
# print(l)    
# # selection sort
# l=list(map(int,input().split(',')))
# for i in range(len(l)):
#     Min=l[i]
#     mini=i
#     for j in range(i,len(l)):
#         if l[j]<Min:
#             Min=l[j]
#             mini=j
#     l[i],l[mini]=l[mini],l[i] 
# print(l)    

    
# recursiv method 
# def fun(n,i):
    
#     if i==11:
#       return 
#     print(n*i)
#     fun(n,i+1)
# fun(3,1)        
 -------------------------------------------------------------       
#factorial
# def factorial(n):
#     # print(n*(n-1))
#     if n==1 or n==0:
#         return 1
#     return n*factorial(n-1)
# print(factorial(0))

  ---------------------------------------------  
quick sort 
def partition(l,s,e):
    pivot=l[e]
    i =s
    for j in range(s,e+1):
        if l[j]<pivot:
            l[j],l[i]=l[i],l[j]
            i+=1
    l[i],l[e]=l[e],l[i]
    return i 
    
def quick_sort(l,s,e):
    if s<=e:
        pivot=partition(l,s,e)
        quick_sort(l,s,pivot-1)
        quick_sort(l,pivot+1,e)
l=[7,3,1,5,2,4]    
# size=len(l)
print(quick_sort(l, 0, len(l) - 1))    
print(l)

    
   #merge sort
912. Sort an Array
class Solution:
    def sortArray(self, l: List[int]) -> List[int]:
        def merge(l,start,mid,end):
            l1=l[start:mid+1]
            l2=l[mid+1:end+1]
            i=0
            j=0
            k=start
            while i<len(l1) and j<len(l2):
                if l1[i]<l2[j]:
                    l[k]=l1[i]
                    i+=1
                    k+=1
                else:
                    l[k]=l2[j]
                    j+=1
                    k+=1
            while i<len(l1):
                l[k]=l1[i]
                k+=1
                i+=1
            while j<len(l2):
                l[k]=l2[j]
                k+=1
                j+=1
        def merge_sort(l,start,end):
            if end>start:
                mid=(start+end)//2
                merge_sort(l,start,mid)
                merge_sort(l,mid+1,end)
                merge(l,start,mid,end)
        merge_sort(l,0,len(l)-1)
        return l              


#148. Sort List
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head==None or head.next==None:
            return head
        def merge(l1,l2):
            dummy=ListNode(0)
            tail=dummy
            while l1 and l2:
                if l1.val<l2.val:
                    tail.next=l1
                    l1=l1.next
                    # tail=tail.next
                else:
                    tail.next=l2
                    l2=l2.next
                tail=tail.next    
            tail.next=l1 if l1 else l2
            return dummy.next

        slow=head
        fast=head.next
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next

        mid=slow.next
        slow.next=None

        left=self.sortList(head)
        right=self.sortList(mid)
        return merge(left,right)


#23. Merge k Sorted Lists
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        def merge(l1,l2):
            dummy=ListNode(0)
            tail=dummy
            while l1 and l2:
                if l1.val<l2.val:
                    tail.next=l1
                    l1=l1.next
                    # tail=tail.next
                else:
                    tail.next=l2
                    l2=l2.next
                tail=tail.next    
            tail.next=l1 if l1 else l2
            return dummy.next

        def divide(lists,si,li):
            if si==li:
                return lists[si] 
            mid=(si+li)//2
            left=divide(lists,si,mid)
            right=divide(lists,mid+1,li)
            return merge(left,right)  

        if not lists:
            return None
        return divide(lists,0,len(lists)-1)     

        




        
















        
    
    
    
    
    
    
    


