class Node:
    def __init__(self, data):
        self.val = data
        self.left = None
        self.right = None

def dfs_inorder(root):
    if root is None:
        return
    dfs_inorder(root.left)
    print(root.val, end=" ")  # Fixed this line
    dfs_inorder(root.right)

def dfs_preorder(root):
    if root is None:
        return
    print(root.val, end=" ")  # Fixed this line
    dfs_preorder(root.left)
    dfs_preorder(root.right)

def dfs_postorder(root):
    if root is None:
        return
    dfs_postorder(root.left)  # Fixed the function call
    dfs_postorder(root.right)  # Fixed the function call
    print(root.val, end=" ")  # Fixed this line

def level_order(root):
    if root is None:
        return
    q = [root]
    while q:
        a = q.pop(0)
        print(a.val, end=" ")
        if a.left:
            q.append(a.left)
        if a.right:
            q.append(a.right)

# Constructing the binary tree
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
root.right.left = Node(6)
# root.right.right = Node(7)  # Uncomment this if needed

print("Root:", root.val)
print("Inorder Traversal:")
dfs_inorder(root)
print("\nPreorder Traversal:")
dfs_preorder(root)
print("\nPostorder Traversal:")
dfs_postorder(root)
print("\nLevel Order Traversal:")
level_order(root)
